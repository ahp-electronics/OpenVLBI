#!/bin/sh

INDIfifo=/tmp/INDI.fifo
VLBIfifo=/tmp/VLBI.fifo
fifo=/tmp/OpenVLBI.fifo
pidfile=/tmp/vlbi_server.pid

start() {
	[ -e $pidfile ] && return;
	mkfifo $VLBIfifo 2>/dev/null
	mkfifo $fifo 2>/dev/null
	sleep 3;
	if [ "$1"=="indi" ]; then
		mkfifo $INDIfifo 2>/dev/null
		indiserver -f $INDIfifo -p 7624 2>/dev/null 1>/dev/null &
		vlbi_client_indi localhost 7624 < $VLBIfifo > $fifo & echo "OpenVLBI started succesfully"
	elif [ "$1"=="dummy" ]; then
		vlbi_client_dummy < $VLBIfifo > $fifo & echo "OpenVLBI started succesfully"
	fi
	touch $pidfile;
	sleep 10;
	exit 0;
}

stop() {
	fuser -n file -k -9 $VLBIfifo 2>/dev/null 1>/dev/null || true;
	sleep 3;
	fuser -n file -k -9 $INDIfifo 2>/dev/null 1>/dev/null || true;
	rm $pidfile $INDIfifo $VLBIfifo $fifo 2>/dev/null && echo "OpenVLBI stopped succesfully"
	sleep 3;
	exit 0;
}

restart() {
	stop;
	start;
	exit 0;
}

run_command() {
	[ -e $VLBIfifo ] && echo $@ > $VLBIfifo
	sleep 4
	read -ers -d '+' ret < $fifo
	echo $ret
	return 0;
}

case "$1" in
	start|stop|restart)
		$1 &
		sleep 10
		;;
	add|del)
		[ -e $INDIfifo ] && [ "$2"=="node" ] && echo "start $3" > $INDIfifo
		[ -e $INDIfifo ] && [ "$2"=="node" ] && echo "stop $3" > $INDIfifo
		run_command $1 $2 $3
		exit 0;
		;;
	set|get)
		run_command $1 $2 $3
		exit 0;
		;;
	png|jpeg|bmp|tiff)
		run_command set resolution $3
		run_command get observation $2 | base64 -d -i | convert -colorspace gray8 -depth=64 -define "quantum_type: float" -size $3 raw:- -depth=32 -colorspace RGB $1:-
		exit 0;
		;;
	*)
		echo "usage $0 [start|stop|restart|set|get|add|del|png [arg [value]]]";
		exit 22;
		;;
esac
